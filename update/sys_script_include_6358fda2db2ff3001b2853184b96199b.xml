<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_68723_parking.ParkingUtility</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ParkingUtility</name>
        <script><![CDATA[var ParkingUtility = Class.create();
ParkingUtility.prototype = {
    initialize: function(slotType, floorlevel) {
        slotType = slotType ? slotType : this.getParameter('sysparm_slot_type');
        floorlevel = floorlevel ? floorlevel :this.getParameter('sysparm_floor_level');

        this.currentCapacity = this.getCapacity(slotType, floorlevel);
        this.slotOccupiedCount = this.slotOccupied(slotType, floorlevel);
        this.nearestEmptySlot = this.getNearestEmptySlot(slotType, floorlevel);
    },
    getNearestEmptySlot: function(slotType, floorlevel) {
        var parkingSpace = new GlideRecord('x_68723_parking_space');
        parkingSpace.addQuery('floor_level', floorlevel);
        parkingSpace.addQuery('slot_type', slotType);
        parkingSpace.addQuery('occupied', 'false');
        parkingSpace.orderBy('sys_created_on');
        parkingSpace.setLimit(1);
        parkingSpace.query();
        if (parkingSpace.next()) {
            return parkingSpace.slot_number;
        } else
            return 0;
    },
    getCapacity: function(slotType, floorlevel) {

        var parkingArea = new GlideRecord('x_68723_parking_area');
        parkingArea.addQuery('floor_level', floorlevel);
        parkingArea.query();
        if (parkingArea.next()) {
            return parkingArea.slot_type_value[slotType];
        } else
            return 0;
    },
    slotOccupied: function(slotType, floorlevel) {

        var parkingSpace = new GlideAggregate('x_68723_parking_space');
        parkingSpace.addQuery('floor_level', floorlevel);
        parkingSpace.addQuery('slot_type', slotType);
        parkingSpace.addQuery('occupied', 'true');
        parkingSpace.addAggregate('COUNT');
        parkingSpace.query();
        if (parkingSpace.next()) {
            return parkingSpace.getAggregate('COUNT');
        } else
            return 0;
    },
    type: 'ParkingUtility'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-31 18:09:12</sys_created_on>
        <sys_id>6358fda2db2ff3001b2853184b96199b</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ParkingUtility</sys_name>
        <sys_package display_value="Parking Assist" source="x_68723_parking">751b2df5db2fb3001b2853184b9619ee</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Parking Assist">751b2df5db2fb3001b2853184b9619ee</sys_scope>
        <sys_update_name>sys_script_include_6358fda2db2ff3001b2853184b96199b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-31 18:28:19</sys_updated_on>
    </sys_script_include>
</record_update>
